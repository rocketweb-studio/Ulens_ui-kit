@use '../../styles/colors' as colors;
@use '../../styles/typography' as typography;


.inputContainer {
  display: flex;
  flex-direction: column;
  width: 100%;
  position: relative;
  padding-bottom: 24px;
}

.inputWrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.label {
  font-size: 14px;
  line-height: 24px;
  font-weight: 400;
  color: colors.color(light, 900);
}
.required.label:after {
  content: '*';
 color: colors.color(danger, 500);
}
.textarea{
  resize: none;
}
.input {
  padding: 6px 12px;
  border: 1px solid colors.color(light, 900);
  color: colors.color(light, 900);
  border-radius: 0;
  font-size: 16px;
  line-height: 24px;
  font-weight: 400;
  transition:
    border-color 0.3s ease,
    background-color 0.3s ease;
  background-color: rgba(0, 0, 0, 0);
  width: 100%;

  &:focus {
    background-color: colors.color(dark, 500);
    border: 1px solid colors.color(light, 100);
    color: colors.color(light, 100);
    outline: none;
  }

  &:disabled {
    background-color: colors.color(dark, 100);
    border: 1px solid colors.color(dark, 100);
    color: colors.color(dark, 100);
  }

  &::placeholder {
    font-family: inherit;
    font-size: 16px;
    line-height: 24px;
    font-weight: 400;
    color: colors.color(light, 900);
  }

  &:hover {
    color: colors.color(light, 900);
    border: 1px solid colors.color(light, 900);
  }
}

.passwordInput {
  padding-right: 40px;
}

.passwordToggle {
  position: absolute;
  right: 8px;
  top: 50%;
  transform: translateY(-50%);
  background: none;
  border: none;
  cursor: pointer;
  color: colors.color(light, 700);
  padding: 4px;
  border-radius: 4px;
  display: flex;
  align-items: center;
  justify-content: center;

  &:hover {
    color: colors.color(light, 900);
    background-color: rgba(255, 255, 255, 0.1);
  }

  &:disabled {
    cursor: not-allowed;
    color: colors.color(dark, 300);

    &:hover {
      background-color: transparent;
    }
  }
}

.checkboxContainer {
  display: flex;
  align-items: center;
  cursor: pointer;
  gap: 10px;
}

.checkboxInput {
  position: absolute;
  opacity: 0;
  cursor: pointer;
  height: 0;
  width: 0;
}

.checkboxCustom {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 18px;
  height: 18px;
  background-color: colors.color(light, 100);
  border-radius: 2px;
  transition: all 0.3s ease;

  &::after {
    content: '';
    position: absolute;
    display: none;
    width: 8px;
    height: 12px;
    border: solid colors.color(dark, 900);
    border-width: 0 2px 2px 0;
    transform: rotate(45deg) translate(-1px, -1px);
  }

  &::before {
    content: '';
    position: absolute;
    width: 36px;
    height: 36px;
    border-radius: 50%;
    background-color: transparent;
    transition: background-color 0.3s ease;
    z-index: -1;
  }

  &:hover::before {
    background-color: colors.color(dark, 300);
  }
}

.checkboxInput:checked ~ .checkboxCustom {
  background-color: white;
  border-color: colors.color(accent, 500);

  &::after {
    display: block;
  }
}

.checkboxInput:disabled ~ .checkboxCustom {
  background-color: colors.color(dark, 100);
  border-color: colors.color(dark, 300);
  cursor: not-allowed;

  &::after {
    border-color: colors.color(dark, 300);
  }
}

.checkboxInput:focus ~ .checkboxCustom {
  box-shadow: 0 0 0 2px rgba(37, 99, 235, 0.2);
}

.checkboxLabel {
  @include typography.regular_text_14;
}

.checkboxInput:disabled ~ .checkboxLabel {
  color: colors.color(dark, 100);
  cursor: not-allowed;
}

.errorInput {
  border-color: colors.color(danger, 500);

  &:focus {
    box-shadow: 0 0 0 2px rgba(255, 77, 79, 0.2);
  }
}

.errorText {
  position: absolute;
  bottom: 0;
  color: color(danger, 500);
  font-size: 14px;
  margin-top: 2px;
  width: 100%;
  white-space: nowrap;
  overflow: hidden;
}

.errorTextContent {
  display: inline-block;
}

.errorLink {
  text-decoration: underline;
  cursor: pointer;
}

@keyframes scrollError {
  0% {
    transform: translateX(0);
  }
  15% {
    transform: translateX(0);
  }
  85% {
    transform: translateX(var(--scroll-amount, 0));
  }
  100% {
    transform: translateX(var(--scroll-amount, 0));
  }
}

.errorTextContent.animated {
  animation: scrollError var(--animation-duration, 15s) infinite;
  animation-timing-function: linear;

  @at-root {
    .errorText:hover .errorTextContent.animated {
      animation-play-state: paused;
    }
  }
}
